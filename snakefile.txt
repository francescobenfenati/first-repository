numbers = ["00"]
for i in range(1,50):
    numbers.append("{:02d}".format(i))
import hashlib
def md5(fname):
            """hash function appropriate for big data"""
            hash_md5 = hashlib.md5()
            with open(fname, "rb") as f:
                for chunk in iter(lambda: f.read(4096), b""):
                    hash_md5.update(chunk)
            return hash_md5.hexdigest()
rule all:
    input:
        expand("transazioni_{number}.tsv", number=numbers)
    output:
        "result.tsv"
    run:
        for filename in input:
            with open("result.tsv",'a') as of:
                of.write(filename)    
                of.write("\t")       
                of.write(md5(filename))
                of.write('\n')
        
rule import_files:
    output:
        out = "transazioni_{numero}.tsv"
    
    run:
        import requests
        url_base = ("https://raw.githubusercontent.com/UniboDIFABiophysics"+
                    "/programmingCourseDIFA/master/snakemake_exercise/")
        filename = output.out

        response = requests.get(url_base+filename)

        # Throw an error for bad status codes
        response.raise_for_status()

        with open(filename, 'wb') as handle:
            handle.write(response.content)

rule confront_hashes:
    input:
        "result.tsv",
        "md5sums.tsv"
    run:
        f_result = open("result.tsv",'r')
        f_md5sums = open("md5sums.tsv",'r')
        try:
            for x in f_result:
                if x == f_md5sums.readline():
                    continue
                else:
                    raise Exception("Hashes don't match")
        except Exception:
                print("Hashes don't match")
                               
            
        

rule import_hashes:
    output:
       out = "md5sums.tsv"
    run:
        import requests
        url_base = ("https://raw.githubusercontent.com/UniboDIFABiophysics"+
                    "/programmingCourseDIFA/master/snakemake_exercise/")
        filename = output.out
        response = requests.get(url_base+filename)

        # Throw an error for bad status codes
        response.raise_for_status()

        with open(filename, 'wb') as handle:
            handle.write(response.content)
            

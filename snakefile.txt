numbers = ["00"]
for i in range(1,3):
    numbers.append("{:02d}".format(i))
import hashlib
def md5(fname):
            """hash function appropriate for big data"""
            hash_md5 = hashlib.md5()
            with open(fname, "rb") as f:
                for chunk in iter(lambda: f.read(4096), b""):
                    hash_md5.update(chunk)
            return hash_md5.hexdigest()
rule all:
    input:
        expand("transazioni_hashed_{number}.tsv", number=numbers)
    output:
        "result.txt"
    shell:
        "cat {input} >> {output} "

rule hashing:
    input:
        ["transazioni_00.tsv", "transazioni_01.tsv","transazioni_02.tsv"]
    output:
        ["transazioni_hashed_00.tsv","transazioni_hashed_01.tsv","transazioni_hashed_02.tsv"]
    run:
        with open("transazioni_hashed_00.tsv",'w') as of:
                of.write(md5("transazioni_00.tsv"))
                of.write('\n')
        with open("transazioni_hashed_01.tsv",'w') as of:
                of.write(md5("transazioni_01.tsv")) 
                of.write('\n') 
        with open("transazioni_hashed_02.tsv",'w') as of:
                of.write(md5("transazioni_02.tsv"))
        
rule import_files:
    output:
        out = "transazioni_{number}.tsv"
    
    run:
        import requests
        url_base = ("https://raw.githubusercontent.com/UniboDIFABiophysics"+
                    "/programmingCourseDIFA/master/snakemake_exercise/")
        filename = output.out

        response = requests.get(url_base+filename)

        # Throw an error for bad status codes
        response.raise_for_status()

        with open(filename, 'wb') as handle:
            handle.write(response.content)

rule import_hashes:
        output:
           out = "md5sums.tsv"
        run:
            import requests
            url_base = ("https://raw.githubusercontent.com/UniboDIFABiophysics"+
                        "/programmingCourseDIFA/master/snakemake_exercise/")
            filename = output.out

            response = requests.get(url_base+filename)

            # Throw an error for bad status codes
            response.raise_for_status()
    
            with open(filename, 'wb') as handle:
                handle.write(response.content)
            
